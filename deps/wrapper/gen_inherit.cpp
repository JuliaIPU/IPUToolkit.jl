template<> struct SuperType<poplar::graph_program_compilation_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::graph_object_creation_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::graph_object_load_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::no_environment> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::unknown_vertex_type> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::unknown_field> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::control_program_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::type_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::index_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::no_size_specified> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::graph_connection_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::graph_cycle_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::graph_recursion_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::graph_replication_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::profiling_disabled> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::missing_profile_data> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::missing_graph_profile> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::missing_perf_estimate> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::invalid_tile_mapping> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::tensor_creation_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::tensor_io_state_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::tensor_metadata_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::stream_connection_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::overflow_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::memory_elem_constraints_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::graph_memory_allocation_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::stream_memory_allocation_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::invalid_machine_model> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::invalid_option> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::link_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::runtime_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::application_runtime_error> { typedef poplar::runtime_error type; };
template<> struct SuperType<poplar::system_runtime_error> { typedef poplar::runtime_error type; };
template<> struct SuperType<poplar::recoverable_runtime_error> { typedef poplar::system_runtime_error type; };
template<> struct SuperType<poplar::unrecoverable_runtime_error> { typedef poplar::system_runtime_error type; };
template<> struct SuperType<poplar::unknown_runtime_error> { typedef poplar::system_runtime_error type; };
template<> struct SuperType<poplar::symbol_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::file_load_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::parse_error> { typedef poplar::poplar_error type; };
template<> struct SuperType<poplar::program::Execute> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::Sequence> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::Repeat> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::RepeatWhileFalse> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::RepeatWhileTrue> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::Loop> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::If> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::Switch> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::Copy> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::CrossReplicaCopy> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::WriteUndef> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::AssumeEqualAcrossReplicas> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::Block> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::Sync> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::Call> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::PrintTensor> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::ErrorProgram> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::Abort> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::program::AbortOnCondition> { typedef poplar::program::Program type; };
template<> struct SuperType<poplar::StreamCallback> { typedef poplar::StreamCallbackBase type; };
template<> struct SuperType<poplar::StreamCallbackWithMetadata> { typedef poplar::StreamCallback type; };
template<> struct SuperType<poplar::ResumableStreamCallback> { typedef poplar::StreamCallback type; };
template<> struct SuperType<poplar::LegacyStreamCallback> { typedef poplar::StreamCallback type; };
